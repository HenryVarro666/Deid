Please anonymize the following text: 



Record date: 2063-09-04

                           124-23-22-9
 
 
She returns for follow-up visit.  She has essential hypertension
and diabetes and is s/p a small CVA.  Medications currently include
vasotec 20 b.i.d., chlorpropamide 250 b.i.d.  I once again
encouraged her to take aspirin which she said gives her a funny
feeling in her stomach, but she is now agreeable to taking 80 mg
q.d.  Hydrochlorothiazide was stopped secondary to an episode of
hyponatremia.  She said she has felt the best over the last three
months and reports no cardiovascular or neurological symptoms. 
Blood pressure 130/70.  No JVD.  Carotid impulses normal.  No
bruits.  Lungs clear.  Cardiac exam normal.  Unremarkable abdomen. 
Full pulses throughout with no edema.  ECG is within normal limits. 
I have made no changes to her medical regimen and she will return
to see Dr. Isaiah Viola in six months.
 
 
 
 
                                              
Otha V. Espinal, M.D.
 
 ******** Approved but not reviewed by Attending Provider ********




*/
// @author A0119252M
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PatientNote {

    public static void main(String[] args) throws Exception {
        // TODO Auto-generated method stub
        List<Note> noteList = new ArrayList<Note>();
        Map<Integer, Note> noteMap = new HashMap<Integer,Note>();
        String line = new String("");
        Note cur = null;
        String[] strLine = new String[10];
        Scanner reader = new Scanner(System.in);

        while ((line = reader.nextLine())!= null) {
            System.out.println("Note: " + line);
        }

        while (line.length()!= 0) {

            //System.out.println(line.split(" "));
            if (cur!= null) {
                if (strLine[0].equals("END NOTE"))
                    noteList.add(cur);
                else {
                    strLine[0] = cur.getType();
                    noteList.add(cur);
                    cur = null;
                }
            }
            
            cur = noteMap.get(strLine[0]);
            
            if (cur == null) {
                cur = new NoteImpl(strLine);
                strLine[0] = cur.getType();
                strLine[4] = (int)(cur.getDate());
                noteMap.put(strLine[0], cur);
                cur = null;
            }

        }
        for (int i = 0; i < noteList.size(); i++) {
            for (int j = 1; j < noteList.size(); j++) {
                if (i!= j) {
                    Note note1 = noteList.get(i);
                    Note note2 = noteList.get(j);
                    if (note1.getType() == note2.getType()) {
                        if (note1.getDate() == note2.getDate()) {
                            System.out.println("Match");
                        } else {
                            System.out.println("Different");
                            //System.err.println("i=" + i + "  j=" + j)
                            break;
                        }
                    } else {
                        System.out.println("Different");
                        //System.err.println("i=" + i + "  j=" + j)
                        break;
                    }
                }
            }
        }

    }
}

class Note {
    //private List<Note> noteList = new ArrayList<Note>();
    private List<Note> noteList = null;
    private String type;
    private String[] strLine;
    private int date;
    private String dateStr, dateNum;
    NoteImpl cur = null;
    public NoteImpl getNextNote() {
        //if (noteList == null)
            //System.out.println("NoteList null.");
        //return null;
        if (type.equals("END NOTE"))
            return null;
        else {
            if (cur!= null) {
                if (cur.getType().equals("END NOTE"))
                    return null;
                else {
                    return cur.getNextNote();
                }
            } else {
                System.out.println("cur null!");
            }
            return null;
        }
    }

    public void clearAllNotes() {
        noteList = new ArrayList<Note>();
    }

    public List<Note> getNoteList() {
        if (cur!= null) {
            noteList = cur.getNoteList();
        } else {
            noteList = new ArrayList<Note>();
        }
        return noteList;
    }

    public String getType() {
        return type;
    }

    public String getDate() {
        return date;
    }

    public void setDate(String date1, int dateNum) {
        this.dateStr = date1;
        this.dateNum = dateNum;
    }

    public void setDate(String date) {
        this.dateStr = date;
        try {
            this.dateNum = Integer.parseInt(date);
        } catch (Exception e) {
            dateNum = date;
        }

    }

    public String getDateStr() {
        return dateStr;
    }

    public int getDateNum() {
        return dateNum;
    }

}