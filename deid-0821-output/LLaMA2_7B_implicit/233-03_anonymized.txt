Please anonymize the following text: 



Record date: 2063-03-20

EASLEY BAPTIST HOSPITAL                         Pickett, Silpa 
                                              12953473
                                              03-20-63 
 
 
 
CHIEF COMPLAINT:  Ms. Pickett comes to the Easley Baptist Hospital with 
numerous complaints.  
 
HISTORY OF PRESENT ILLNESS:  She states that she has not been feeling well 
since her upper respiratory tract infection.  She had the flu in January 
and then developed another upper respiratory tract infection a couple of 
weeks ago.  She states that this has severely debilitated her.  She is 
complaining of occasional nonproductive cough, post nasal drip, and 
occasional dull headache.  However, her main concern is her stomach and 
her back.  Ms. Pickett continues to have postprandial nausea and discomfort 
in her epigastrium, particularly after eating.  This is different than her 
reflux disease, which she feels is under fairly good control, with the 
Prilosec-Propulsid combination.  She is describing some anorexia, although 
she has not lost any weight.  She has not had any alterations in her bowel 
movements.  She has not been constipated or had diarrhea.  She wonders 
whether this could be in gallbladder.  In addition, she is continuing to 
have some back pain with radiation down her left leg in the L5/S1 
distribution.  She had one epidural steroid injection but was due to go 
back.  Given her upper respiratory tract infection, this was postponed.  
 
She is not having any heart symptoms or shortness of breath.  Her sugars 
have been under good control, ranging between 111 and 143.  Her blood 
pressure is 152/70 today, with a pulse of 70.  She is saturating well.
 
PHYSICAL EXAMINATION:  On physical exam, lungs were clear to auscultation.  
There was no JVD.  Heart: regular rate and rhythm with positive S4, ? S3 
with no significant murmur.  Abdomen was soft, nondistended, with some 
mild tenderness without rebound or guarding over the right upper quadrant.  
Abdomen was somewhat bloated per patient and diffusely tender.  
Extremities revealed some mild pedal edema left greater than right.  
 
ASSESSMENT AND PLAN:  A seventy-one-year-old woman with multiple medical 
issues, including coronary artery disease, CHF, diabetes, hypertension, 
and cerebrovascular disease.  She came in today for discussion of her 
ongoing lumbar radiculopathic pain as well as her abdominal complaint.
 
With regard to her back pain, she wanted a prescription for Tylenol with 
codeine, which has helped in the past.  I gave her a prescription.  I 
warned her about the possible side effects of constipation.  She should 
contact the pain clinic as soon as she feels able, for a repeat epidural 
steroid injection.
 
With regard to her abdominal complaints, the bubbling in her chest, 
postprandial nausea and anorexia could certainly be due to gallbladder 
disease.  Unclear contribution from her reflux.  Dr. Mario Robison 
recommended elective cholecystectomy.  Given the fact that Ms. Pickett is 
being more and more bothered by these symptoms, it may be reasonable to 
EASLEY BAPTIST HOSPITAL                         Pickett, Silpa 
                                              12953473
                                              03-20-63 
page 2 
 
 
consider her for the surgery.  I have asked her to call Dr. Xiques and 
make an appointment to discuss her cardiovascular risk so that she can 
make an informed decision about the surgery.  
 
She is otherwise up to date with her issues and doing relatively well from 
a cardiovascular and diabetic perspective.  She would probably do better 
with lower blood pressure.  We could consider increasing her Imdur.  
 
I plan to follow up with her in a few weeks time.
 
 
 
_________________________
Una Romano, M.D.                                                   
 
LL:OB:6245                                                              
DD:03-20-63                                                             
DT:03-20-63                                                             
DV:03-20-63                                                             
 ******** Not reviewed by Attending Physician ********




                                               12953473
                                              03-20-63

















 
 
*/



// ******** BEGIN GENERATED CODE *******

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Shapes;
using Microsoft.Expression.Drawing;
using Microsoft.Expression.Drawing.Commands;
using Microsoft.Expression.Markup.Commands;
using Microsoft.Expression.Markup.Infrastructure;

namespace Microsoft.Expression.Xaml.Controls
{
    public partial class XamlMediaElement : MediaElement
    {
        static XamlMediaElement()
        {
            RegisterCommand<XamlMediaElement>(Commands.Play, Play);
            RegisterCommand<XamlMediaElement>(Commands.Pause, Pause);
            RegisterCommand<XamlMediaElement>(Commands.Stop, Stop);
        }

        public XamlMediaElement()
        {
            // This call is required by the Windows.Foundation.Metadata.xml attribute
            InitializeComponent();
            this.Loaded += new RoutedEventHandler(XamlMediaElement_Loaded);
        }

        public static void InitializeComponent()
        {
            FrameworkElementFactory factory = FrameworkElementFactory.Create(() =>
            {
                return new XamlMediaElement();
            });

            factory.PrototypeContentFactory =
                new PrototypeContentFactory<XamlMediaElement>(
                    factory.CreateAsync);

            MarkupExtensionFactory.Register<XamlMediaElement>(factory,
                "x:Key", new MarkupExtensionFactory.AttributeInfo(
                    "x:Key",
                    new FrameworkPropertyMetadata(
                        FrameworkPropertyMetadataOptions.AffectsRender
                        | FrameworkPropertyMetadataOptions.Inherits,
                        new PropertyChangedCallback(XamlMediaElement_PropertyChanged)))
                {
                    Attributes = new[]
                        {
                            typeof(System.Windows.Media.MediaEndedEventHandler),
                            typeof(System.Windows.Media.MediaOpenedEventHandler),
                            typeof(System.Windows.Media.MediaFailedEventHandler),
                            typeof(System.Windows.Media.MediaStoppedEventHandler)
                        }
                });

            MarkupExtensionFactory.Register<XamlMediaElement>(factory, "Source",
                new MarkupExtensionFactory.AttributeInfo(
                    "Source", "Uri",
                    new FrameworkPropertyMetadata(
                        FrameworkPropertyMetadataOptions.AffectsRender
                        | FrameworkPropertyMetadataOptions.Inherits,
                        new PropertyChangedCallback(XamlMediaElement_PropertyChanged)))
                {
                    Attributes = new[]
                    {
                        typeof(System.Uri)
                    }
                });

            MarkupExtensionFactory.Register<XamlMediaElement>(factory,
                "Source", new MarkupExtensionFactory.MultiAttributeInfo(
                    "Source", "Source", "MediaOpened", "MediaEnded"
                   , "MediaFailed", "MediaCanAutoPlay",
                    new FrameworkPropertyMetadata(
                        FrameworkPropertyMetadataOptions.Inherits)));

            // This call is required by the Windows.Foundation.Metadata.xml attribute
            factory.RegisterAsPrototypeFactory();

            MarkupExtension.RegisterFactory<XamlMediaElement>(factory);
        }

        void XamlMediaElement_PropertyChanged(DependencyObject source, DependencyPropertyChangedEventArgs args)
        {
            ((FrameworkElement)source).RaisePropertyChanged(args.Property);
        }

        void XamlMediaElement_Load(object sender, RoutedEventArgs e)
        {
            var me = this.GetVisualRoot();
            this.Source = new Uri(new Uri(me.GetValue(UriPropertyKey) as object), UriKind.RelativeOrAbsolute);
        }

        private static void Play(object sender, RoutedEventArgs e)
        {
            var media = (MediaElement)sender;
            media.Play();
        }

        private static void Pause(object sender, RoutedEventArgs e)
        {
            var media = (MediaElement)sender;
            if ( media.IsPlaying())
            {
                media.Pause();
            }
        }

        private static void Stop(object sender, RoutedEventArgs e)
        {
            var media = (MediaElement)sender;
            media.Stop();
        }

        private void OnMediaEnded(object sender, MediaEndedRoutedEventArgs e)
        {
            var media = sender as MediaElement;
            if (media!= null)
            {
                Pause(sender, e);
            }
        }

        private void OnMediaOpened(object sender, MediaOpenedRoutedEventArgs e)
        {
            if (sender is MediaElement)
            {
                Pause(sender, e);
            }
        }

        private void OnMediaPlaybackCompleted(object sender, RoutedEventArgs e)
        {
            ((MediaElement)sender).Stop();
        }

        private void OnMediaPlaybackLost(object sender, RoutedEventArgs e)
        {
            ((MediaElement)sender).Stop();
        }

        private void OnMediaStopped(object sender, RoutedEventArgs e)
        {
            var media = sender as MediaElement;
            if (media!= null)
            {
                Pause(sender, e);
            }
        }

        private void OnMediaClosed(object sender, RoutedEventArgs e)
        {
        }

        private void OnMediaCurrentSourceChanged(object sender, RoutedEventArgs e)
        {
        }

        private void OnMediaOpening(object sender, RoutedEventArgs e)
        {
        }
    }
}

namespace Microsoft.Windows.Themes
{
    public static class MarkupExtensionFactory
    {
        public static void Register<T>(FrameworkElementFactory factory,
                                        string x: string,
                                        FrameworkPropertyMetadata p)
        {
            factory.PrototypeContentFactory =
                new PrototypeContentFactory<T>(
                    CreateAsync,
                    new FrameworkContentCreationInfo
                    (
                        p,
                        x,
                        typeof(T),
                        typeof(T).Assembly,
                        typeof(T).GetTypeInfo().AssemblyQualifiedName
                    ));
        }
    }
}

namespace Microsoft.Windows.Themes.Markup
{
    namespace Infrastructure
    {
        public static class MarkupExtension
        {
            public static void RegisterFactory<T>(FrameworkElementFactory factory)
            {
                if (factory!= null)
                {
                    factory.RegisterMarkupFactory(typeof(T));
                }
            }
        }
    }

    namespace Commands
    {
        public static class Commands
        {
            public static void Play(object commandTarget)
            {
                ((UIElement)(typeof(XamlMediaElement).GetTypeInfo().GetCustomAttribute<CommandTargetAttribute>().Target))
                   .RaiseEvent(new MediaEndedEvent(new RoutedEventArgs()));
            }

            public static void Pause(object commandTarget)
            {
                ((UIElement)(typeof(XamlMediaElement).GetTypeInfo().GetCustomAttribute<CommandTargetAttribute>().Target))
                   .RaiseMediaOpenedEvent(new RoutedEventArgs());
            }

            public static void Stop(object commandTarget)
            {
                ((UIElement)(typeof(XamlMediaElement).GetTypeInfo().GetCustomAttribute<CommandTargetAttribute>().Target))
                   .RaiseMediaStoppedEvent(new RoutedEventArgs());
            }
        }
    }
}

namespace System.Windows.Media
{
    public sealed partial class MediaEndedEventArgs : EventArgs
    {
        public MediaEndedEventArgs(RoutedEventArgs e)
        {
            Event = e;
        }

        public RoutedEventArgs Event { get; private set; }

        public override string ToString()
        {
            return Event.ToString();
        }
    }
}

namespace System.Windows.Media
{
    public sealed partial class MediaEndedEvent : RoutedEventArgs
    {
        public MediaEndedEvent(RoutedEventArgs e) : base(e)
        {
        }

        public MediaEndedEvent(RoutedEvent routedEvent) : base(routedEvent)
        {
        }

        public MediaEndedEvent(RoutedEvent routedEvent, RoutedEventArgs args) :
            base(routedEvent, args)
        {
        }
    }
}

namespace System.Windows.Media
{
    public sealed partial class MediaFailedEventArgs : EventArgs
    {
        public MediaFailedEventArgs(Exception e) :
            base(e)
        {
        }

        public MediaFailedEventArgs(RoutedEvent routedEvent) :
            base(routedEvent)
        {
        }

        public MediaFailedEventArgs(RoutedEvent routedEvent, EventArgs args) :
            base(routedEvent, args)
        {
        }
    }
}

namespace System.Windows.Media
{
    public sealed partial class MediaOpenedEventArgs : EventArgs
    {
        public MediaOpenedEventArgs(RoutedEventArgs e) : base(e)
        {
        }

        public MediaOpenedEventArgs(RoutedEvent routedEvent) : base(routedEvent)
        {
        }

        public MediaOpenedEventArgs(RoutedEvent routedEvent, RoutedEventArgs args) :
            base(routedEvent, args)
        {
        }
    }
}

namespace Microsoft.Windows.Themes.Commands
{
    public sealed partial class Command : MarkupCommand
    {
        public Command(IUIElement target, string name, FrameworkPropertyMetadata metadata)
        {
            Target = (UIElement)target;
            Target.RegisterCommand(name, this);
        }

        public Command(IUIElement target, string name, FrameworkMetadata metadata)
        {
            Target = (UIElement)target;
            Target.RegisterCommand(name, this);
        }

        public Command(IUIElement target, FrameworkPropertyMetadata metadata)
        {
            Target = (UIElement)target;

            if (metadata.TargetType!= metadata.AssociatedObjectTypes.Any())
            {
                Target.RegisterCommand(metadata.Name, this);
            }
        }

        public Command(IUIElement target, FrameworkMetadata metadata)
        {
            Target = (UIElement)target;

            if (metadata.TargetType!= metadata.AssociatedObjectTypes.Any())
            {
                Target.RegisterCommand(metadata.Name, this);
            }
        }

        public Command(IUIElement target)
        {
            Target = (UIElement)target;
        }
    }
}

namespace Microsoft.Windows.Themes.Commands
{
    public static class Commands
    {
        public static class Commands
        {
            public static void Play(object commandTarget)
            {
                ((MarkupCommandCommandTargetAttribute)commandTarget)
                   .RaiseEvent(new MediaEndedEvent(new RoutedEventArgs()));
            }

            public static void Pause(object commandTarget)
            {
                ((ICommandTargetAttribute)commandTarget)
                   .RaiseMediaOpenedEvent(new RoutedEventArgs());
            }

            public static void Stop(object commandTarget)
            {
                ((ICommandTargetAttribute)commandTarget)
                   .RaiseMediaStoppedEvent(new RoutedEventArgs());
            }
        }
    }
}

namespace Microsoft.Windows.Themes.Infrastructure
{
    using Microsoft.Expression.Drawing;
    using Microsoft.Expression.Drawing.Commands;
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.IO;
    using System.Text