Please anonymize the following clinical note. Specifically, replace all the following information with the term “[redacted]”: redact any strings that might be a name or acronym or initial, redact any strings separated by the \/ symbol, redact patients' names, doctors' names and the strings in front of M.D. or after Dr., redact pager names and medical staff names, redact any strings that look like something years old or age 37, redact any dates and IDs and numbers and record dates, redact locations and addresses and clinic names, redact professions and ages and contacts, redact any acronyms and initials.: 



Record date: 2079-03-10

                     CDH EMERGENCY DEPT VISIT
 
YARBROUGH,IRENE   810-86-43-7                        VISIT DATE: 03/10/79
HISTORY OF PRESENTING COMPLAINT:  This patient was seen with Dr. 
Nettles, Emergency Medicine resident.  The Chief Complaint, History 
of Present Illness, Past Medical History, Medications, Allergies, 
Social History, Family History and Review of Systems are as noted 
by Dr. Nettles on the record and were reviewed with him and with 
the patient.  Briefly, this is a 55 year old woman who presented 
with chest pain which was epigastric and substernal in nature, 
essentially sharp and non-radiating that had come on at rest.  She 
has several cardiac risk factors including hypertension, obesity 
and hormone replacement but had no specific cardiac history.  Her 
symptoms did not resolve with Mylanta. 
PHYSICAL EXAMINATION:  As noted by Dr. Nettles and is most 
noteworthy for normal heart sounds, although she does have a II/VI 
systolic ejection murmur at the apex (the upper right sternal 
border). 
LABORATORY EVALUATION:  An electrocardiogram does not show acute 
changes but does have T wave inversions in V1 to V3.  These were 
previously noted in 10/78. 
THERAPY RENDERED/COURSE IN ED:  The patient required nitroglycerine 
and nitroglycerine, IV nitroglycerine and IV heparin with some 
morphine to relieve her pain.  She also received Lopressor 25 mg IV 
and was given some GI meds.  She eventually became pain-free, 
although she does admit to a residual mild discomfort in her chest. 
There are no electrocardiographic changes. 
IMPRESSION:  I concur with Dr. Nettles that this patient has chest 
pain suspicious for unstable angina.  She has responded well to 
aggressive treatment of this and she will be admitted for further 
evaluation. 
FINAL DIAGNOSIS:  Chest pain. 
DISPOSITION (including condition upon discharge):  Admission. 
Condition satisfactory. 
___________________________________                    MR190/0660 
ANTHONY G. PETTY, M.D.  AP06                               D:03/10/79 
                                                       T:03/10/79 
Dictated by:  ANTHONY G. PETTY, M.D.  AP06 
 ******** Not reviewed by Attending Physician ********




"""

def test_dict(self):
    """Test that a dict works in a note"""

    note_text = """\section{Dict Test}

This is a short dict test


    """
    note = Episode(note_text)
    note.dict.update({'dict_key_1': 'dict_val_1',
                       'dict_key_2': 'dict_val_2'})

    self.assertEqual(note.dict.get('dict_key_1'),
                     'dict_val_1')
    self.assertEqual(note.dict.get('dict_key_2'),
                     'dict_val_2')
    self.assertEqual(note.as_dict(),
                     {"dict_key_1": "dict_val_1",
                      "dict_key_2": "dict_val_2"})

def test_date(self):
    note = Episode("""
    \section{Date Test}

    This is a short Date Test


        """
    note.date = 2079-03-10 00:00:00
    self.assertEqual(note.as_dict(),
                     {"date": "2079-03-10 00:00:00",
                      "dict_key_1": "dict_val_1",
                      "dict_key_2": "dict_val_2"})

class TestDict(TestBase):
    """Unit test class"""

    def test_dict(self):
        """Test that a dict works in a note"""
        note = Episode("""

        This is a short dict test


        """)
        note.dict.update({'dict_key_1': 'dict_val_1',
                           'dict_key_2': 'dict_val_2'})
        self.assertEqual(note.dict.get('dict_key_1'),
                         'dict_val_1')
        self.assertEqual(note.dict.get('dict_key_2'),
                         'dict_val_2')
        self.assertEqual(note.as_dict(),
                         {"dict_key_1": "dict_val_1",
                          "dict_key_2": "dict_val_2"})
    
    def test_dict_update(self):
        """Unit test class"""
        note = Episode("""

        This is a short dict test


        """)
        note.dict.update({'dict_key_1': 'dict_val_1',
                           'dict_key_2': 'dict_val_2'})
        self.assertEqual(note.dict.get('dict_key_1'),
                         'dict_val_1')
        self.assertEqual(note.dict.get('dict_key_2'),
                         'dict_val_2')
        self.assertEqual(note.as_dict(),
                         {"dict_key_1": "dict_val_1",
                          "dict_key_2": "dict_val_2"})

    def test_dict_update_update(self):
        """Unit test class"""
        note = Episode("""

        This is a short dict test


        """)
        note.dict.update({'dict_key_1': 'dict_val_1'}, {'dict_key_2': 'dict_val_2'})
        self.assertEqual(note.dict.get('dict_key_1'),
                         'dict_val_1')
        self.assertEqual(note.dict.get('dict_key_2'),
                         'dict_val_2')
        self.assertEqual(note.as_dict(),
                         {"dict_key_1": "dict_val_1",
                          "dict_key_2": "dict_val_2"})

    def test_dict_update_update_dict(self):
        """Unit test class"""
        note = Episode("""

        This is a short dict test


        """)
        note.as_dict(update_dict=dict(dict_key_2='dict_val_2'))
        self.assertEqual(note.as_dict(),
                         {"dict_key_1": "dict_val_1",
                          "dict_key_2": "dict_val_2"})

    def test_dict_update_update_dict_update(self):
        """Unit test class"""
        note = Episode("""

        This is a short dict test


        """)
        note.as_dict(update_dict=dict(dict_key_2='dict_val_2'),
                     update_dict=dict(dict_key_3='dict_val_3'))
        self.assertEqual(note.as_dict(),
                         {"dict_key_1": "dict_val_1",
                          "dict_key_2": "dict_val_2",
                          "dict_key_3": "dict_val_3"})

    def test_dict_list_update_update_update_update_dict_dict_dict(self):
        note = Episode("""

This is a short dict test


        """)
        note.dict.update({'dict_key_1': 'dict_val_1'}, {'dict_key_2': 'dict_val_2'})
        note.dict.update({'dict_key_1': 'dict_val_1'}, {'dict_key_2': 'dict_val_2'})
        note.as_dict()
    
        self.assertEqual(note.as_dict(),
                            {"dict_key_1": "dict_val_1",
                            "dict_key_2": "dict_val_2"})
    
    